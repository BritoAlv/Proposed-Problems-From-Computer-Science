Sea L = all languages, o sea un subset de sigma*

L es uncountable: to see why, 

poner a los elementos de sigma start en una fila, 

y si el lenguage contiene a esa especifica columna, ponemos 1, else 0, de esta forma podemos crear el número real que deseemos y es una biyección.


So imaging real numbers, may also be  imaging a subset of {0, 1}*

Por otro lado cualquier subset de sigma start es contable => esto implica que todas las máquinas de turing son una cantidad contable.

Algunos lenguajes no son decidibles. 

Asumir que hay una máquina de Turing H, decide A_TM, esto means que:

H on <M, w> 
	acepta si M acepta w.
	reject else

para hallar una contradicción es necesario hallar un par <M, w> tal que H no pueda tomar la right choice.

crear una nueva máquina de Turing D, que lo que va a tomar como 
D on input: una máquina de Turing M
	simular H con entrada <M, <M>>

esto siempre va a dar como resultado acept or reject, porque eso hacer el decider, pero bueno nuestra máquina va a devolver lo contrario.

D va a usar a H para simular las máquinas de Turing pasándole como entradas a si mismas, pero devuelve el resultado invertido.

ahora si a esta máquina le pasamos como entrada ella misma, entonces

D acepta D si ( D no acepta D)

A => B si A !=> B

la diagonalización está en lo siguiente:

   <M1> <M2> ... <D>
   
M1 
M2
M3
....
D   

notar que H llena la tabla, pero en la fila de D, va lo contrario a lo que hay en la diagonal, por tanto cuando se vaya a llenar lo que va en (diagonal, diagonal) habrá un error.

Si A, A complemento son T-recognizable then A is decidable.

Sea TM M1, M2 que reconocen A, A complemento.

Correr M1, M2 en paralelo hasta que uno acepte. ( tiene que pasar)

Si M1 acepta aceptar
Si M2 acepta entonces reject.

Reducibility Method:
	usar que A_{TM} es undecidable to show others are undecidable.
	
Definir HALT_TM = {<M, w> M halts on input w}

Este lenguaje es undecidable, asumir otherwise,

Sea TM R decide HALT_{TM}, construir TM S deciding A_{TM}

ahora hay que constuir una máquina de turing que decide el aceptance problem para las máquinas de turing que ya se que no se puede.

S = On input <M, w>
		Use R to test if M on w halts, if not reject.
		Else simulate M on w until it halts ( como garantiza R) devolver ese resultado.
		
S es un decider para lo otro, que es falso.
