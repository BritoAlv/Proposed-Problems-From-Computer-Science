Sea func(n) = n*(n+1)/2.

Notar que si k <= (n-1)*n/2 es equivalente a resolver el problema para (n-1, k) y agregar al final un número lo suficientemente negativo de forma de que no cree más sumas >= 0. esto genera un while, hasta que no se cumpla esta condición, 

o sea (n, k) => (n-1, k) => .... (n-m, k), y ahora iríamos para el segundo caso:

Si k > (n-1)*n / 2, notar que resolver el problema para (n, k) es equivalente a resolverlo para (n, func(n) - k), porque al multiplicar por -1 todos los valores de el subarray los positivos son negativos, y los negativos positivos, asumiendo que no hay subarrays con suma 0.

n*(n+1)/2 - k <= n(n-1)/2
            n <= k se cumple porque n*(n-1)/2 >= n

Como número escogo la suma de todos los valores positivos que ya están aumentada en 1. (este número puede crecer rápido, pero este proceso se va a ejecutar con n <= 30 a lo más 5 veces.  

Quedaría demostrar que el número que se le pone al final no sobrepasa a 1000, cada vez que se hace ese proceso a k le es removido t*(t+1)/2, donde t es el mayor entero tal que:

t*(t+1)/2 <= k

1
3
6
10
15
21
28

30 => 2 => 1 => 0
27 => 6 => 0
26 => 5 => 2 => 1 => 0
