        
        Motivation, let's analyze the problem ignoring floors.
        T(n) = n + log_n - 2
        T(2n) = 2n + log_2n - 2 = (n + log_n - 2) + (n+1)
        T(2n) = T(n) + (n+1)

        Last line suggest there is a recursive solution to the problem.

        First attempt: given 2*n elements, compute second smallest of first n elements recursively, after that we are left with n elements that we do not know anything about them ( no properties ), and the second smallest of first half, so in particular answer to the problem could be in that other half, and to obtain it we would need T(n) comparisons by the statement of the problem, so this way doesn't work.

        Second attempt: from the problem of computing both maximum and minimum at the same time, we know that the best way is to split the 2n elements in n pairs,  
        and compare each pair, this is the cheapest way with respect to number of comparisons of obtain more information about the 2n numbers. So let's split the elements in n pairs, now I need to find a subproblem of size n.

        Idea is first compare elements and take the smallest of each pair, now notice that the answer to our problem is either the second element between those smallest elements ( because the smallest element is between those ) or the element that is paired with the smallest element. 
        
        
        It can be proven using induction that if :
        T(2) = 1
        T(2n) = T(n) + (n+1)
        
        then : T(n) <= n + [log_2 n] - 2
        
        T(k)     = T(k/2) + (k/2+1)
        	<= k/2 + [log_2 k/2] - 2 + (k/2+1)
        	<= k + log_2 k -1-2+1
        	<= k + log_2 k -2
        	 
There are two solutions, they are the same (isomorphic), one is recursive, and the other is iterative.

Iterative one is simulate an direct elimination tournament.      		


