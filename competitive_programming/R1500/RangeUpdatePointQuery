// Problem: F. Range Update Point Query
// Contest: Codeforces - Codeforces Round 849 (Div. 4)
// URL: https://codeforces.com/problemset/problem/1791/F
// Memory Limit: 256 MB
// Time Limit: 2000 ms
// Math Proof:
//
// Powered by CP Editor (https://cpeditor.org)

#include <bits/stdc++.h>
#define endl '\n'
#define wp ' '
#define forn for (int i = 0; i < n; i++)
#define form for (int j = 0; j < m; j++)
#define fork for (int i = 0; i < k; i++)
#define pb push_back
#define ull unsigned long long
#define pi pair<int, int>
#define sz size()
// je m appelle Alvaro j ai 21 ans.

using namespace std;

int sum_digits(int n)
{
    if (n < 10)
    {
        return n;
    }
    else
    {
        return n % 10 + sum_digits(n / 10);
    }
}

int p[200001];
int n;
int find(int x)
{
    if (p[x] == x)
    {
        return p[x];
    }
    return p[x] = find(p[x]);
}

void merge(int x, int y)
{
    if (find(x) != find(y))
    {
        p[x] = max(p[x], p[y]);
        p[y] = max(p[x], p[y]);
    }
    return;
}

void Solve()
{
    int q;
    cin >> n >> q;
    int a[n];
    forn
    {
        cin >> a[i];
        p[i] = i;
    }
    p[n] = n;
    while (q > 0)
    {
        int op;
        cin >> op;
        if (op == 1)
        {
            int l, r;
            cin >> l >> r;
            l--;
            r--;
            for (int i = l; i <= r; i++)
            {
                int next = find(i);
                if (next == i)
                {
                    a[i] = sum_digits(a[i]);
                    if (a[i] < 10)
                    {
                        merge(i, i + 1);
                    }
                }
                else
                {
                    i = next - 1;
                }
            }
        }
        else
        {
            int pos;
            cin >> pos;
            cout << a[--pos] << endl;
        }
        q--;
    }
    return;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int test_cases;
    cin >> test_cases;
    while (test_cases-- > 0)
    {
        Solve();
    }
    return 0;
}
