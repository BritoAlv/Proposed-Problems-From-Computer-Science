// Problem: B. The Walkway
// Contest: Codeforces - Codeforces Round 893 (Div. 2)
// URL: https://codeforces.com/problemset/problem/1858/B
// Memory Limit: 256 MB
// Time Limit: 1000 ms
// Math Proof:
//
// Powered by CP Editor (https://cpeditor.org)

#include <bits/stdc++.h>
#define endl '\n'
#define wp ' '
#define forn for (int i = 0; i < n; i++)
#define form for (int j = 0; j < m; j++)
#define pb push_back
#define ull unsigned long long

// je m appelle Alvaro j ai 21 ans.

using namespace std;

int n, m, d;

int count_cookies(int last_eaten, int upper_next)
{
    int ans = (upper_next - last_eaten) / d + ((upper_next - last_eaten) % d != 0);
    return ans;
}

void Solve()
{
    cin >> n >> m >> d;
    int cs[m];
    for (int i = 0; i < m; i++)
    {
        cin >> cs[i];
    }
    int ans = 0;
    int choosen = -1;
    for (int i = 0; i < m; i++)
    {
        int last_eaten = (i == 0 ? 1 : cs[i - 1]);
        if ((cs[i] - last_eaten) % d != 0)
        {
            last_eaten += ((cs[i] - last_eaten) / d) * d;
            if (i != m - 1)
            {
                if (count_cookies(last_eaten, cs[i + 1]) < 1 + count_cookies(cs[i], cs[i + 1]))
                {
                    choosen = i;
                    ans++;
                }
            }
            else
            {
                int to_eat = (n - last_eaten) / d;
                if (to_eat < 1 + (n - cs[i]) / d)
                {
                    choosen = i;
                    ans++;
                }
            }
        }
    }
    int n_cookies = 1;
    int last_eaten = 1;
    for (int i = 0; i < m; i++)
    {
        if (i != choosen)
        {
            n_cookies += count_cookies(last_eaten, cs[i]);
            last_eaten = cs[i];
        }
    }
    n_cookies += (n - last_eaten) / d;
    if (choosen == -1)
    {
        cout << n_cookies << wp << m << endl;
    }
    else
    {
        cout << n_cookies << wp << ans << endl;
    }

    return;
}

int main()
{
    int test_cases;
    cin >> test_cases;
    while (test_cases > 0)
    {
        Solve();
        test_cases--;
    }
    return 0;
}